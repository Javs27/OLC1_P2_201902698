%{
    //codigo js
    const nativo = require('./Expresions/Native');
    const Tipo = require('./Symbol/Type');
    const impresion = require('./Instructions/imprimir');
    const declaracion = require('./Instructions/Declaracion');
    const controller = require('../../../controller/parser/parser');
    const errores = require('./Exceptions/Error');
    const aritmetico = require('./Expresions/Aritmetica');
    const relacional = require('./Expresions/Relacional');
    const logica = require('./Expresions/Logica');
    const ifIns = require('./Instructions/IfIns'); 
    const mientras = require('./Instructions/Mientras');
    const asignacion = require('./Instructions/Asignacion');
    const newInstructions = require('./Instructions/NewInstructions');
    const doWhile  = require('./Instructions/Mientras');

%}
%lex 


%options case-insensitive 
//inicio analisis lexico
%%
"imprimir"      return 'RESPRINT';
"if"            return 'RESIF';
"else"          return 'RESELSE';
"while"         return 'RESWHILE';      
"entero" return 'RESINT';
'cadena' return 'RESSTRING';
"=" return 'IGUAL';
"||" return 'OR';
"+" return 'MAS';
"-" return 'MENOS';
"*" return 'MULTIPLICACION';
">" return 'MAYOR_QUE';
"do" return "do";

[0-9]+ return 'ENTERO';
[a-zA-Z]+["_"0-9A-Za-z]* return 'IDENTIFICADOR';

";"             return 'PTCOMA';
"("             return 'PARABRE';
")"             return 'PARCIERRA';
"{"             return 'LLAVIZQ';
"}"             return 'LLAVDER';

[ \r\t]+ { }
\n {}
\"[^\"]*\"                  { yytext=yytext.substr(1,yyleng-2); return 'CADENA'; }


<<EOF>>                     return 'EOF';
.                           return 'INVALID'

/lex
%left 'OR'
%left 'MAYOR_QUE'
%left 'MAS' 'MENOS'

%start INIT
//Inicio
//Definicion de gramatica

%left 'SUMA'
%left 'MULTIPLICACION'
%%

INIT: INSTRUCCIONES EOF     {return $1;}
;

INSTRUCCIONES : INSTRUCCIONES INSTRUCCION {$1.push($2); $$=$1;}
              | INSTRUCCION               {$$=[$1];}
;

INSTRUCCION : IMPRIMIR              {$$=$1;}
            | ASIGNACION            {$$=$1;}
            | CICLO_DOWHILE
            | WHILEINS              {$$=$1;}     
            | IFINS                 {$$=$1;}
            | DECLARACION            {$$=$1}
            | INVALID               {controller.listaErrores.push(new errores.default('Error lexico', $1,@1.first_line, @1.first_column));}
            | error  PTCOMA         {controller.listaErrores.push(new errores.default('Error sintactico','Se esperaba token ',@1.first_line, @1.first_column));}
;

ASIGNACION :
    IDENTIFICADOR IGUAL EXPRESION PTCOMA 
                            {$$ = new asignacion.default($1, $3,@2.first_line,@2.first_column);}
;




DECLARACION :
    RESINT IDENTIFICADOR IGUAL EXPRESION PTCOMA 
    
    {$$=new declaracion.default($2, new Tipo.default(Tipo.DataType.ENTERO), $4, @1.first_line, @1.first_column );}
   
;

/* IMPRIMIR*/

IMPRIMIBLE:
    EXPRESION {$$=$1;}  
    | EXPRESION_LOGICA {$$=$1;}  
;


IMPRIMIR : RESPRINT PARABRE IMPRIMIBLE PARCIERRA PTCOMA {$$=new impresion.default($3,@1.first_line,@1.first_column);}

;

/* EXPRESIONES */

OPERACIONESARITMETICAS:
    MAS     {$$=aritmetico.tipoOp.SUMA;}
    | MENOS {$$=aritmetico.tipoOp.RESTA;}
;

EXPRESION : 
    EXPRESION OPERACIONESARITMETICAS EXPRESION {$$ = new aritmetico.default($2, $1, $3, @1.first_line, @1.first_column);}
    | IDENTIFICADOR {$$ = new nativo.default(new Tipo.default(Tipo.DataType.IDENTIFICADOR), $1, @1.first_line, @1.first_column);}
    | ENTERO {$$= new nativo.default(new Tipo.default(Tipo.DataType.ENTERO),$1, @1.first_line, @1.first_column);}
    | CADENA {$$= new nativo.default(new Tipo.default(Tipo.DataType.CADENA),$1, @1.first_line, @1.first_column);}
;

/* EXPRESIONES*/ 

EXPRESION_RELACIONAL :
    EXPRESION MAYOR_QUE EXPRESION {$$ = new relacional.default(relacional.tipoOp.MAYOR, $1, $3, @2.first_line, @2.first_column);}
;


EXPRESION_LOGICA :
    EXPRESION_LOGICA OR EXPRESION_RELACIONAL {$$ = new logica.default(logica.tipoOp.OR, $1, $3, @1.first_line, @1.first_column);}
    | EXPRESION_RELACIONAL                   {$$ = $1;}
;

/* ciclo if */

IFINS:
    SIMPLEIF                {$$ = $1;}                            
    | RESIF PARABRE EXPRESION_LOGICA PARCIERRA LLAVIZQ NEWINSTRUCCIONTS LLAVDER ELSEIFSINS RESELSE LLAVIZQ INSTRUCCIONES LLAVDER 
                            {$$=new ifIns.default($3,$6,$8,$11,@1.first_line,@1.first_column);} 
;

SIMPLEIF:
    RESIF PARABRE EXPRESION_LOGICA PARCIERRA LLAVIZQ NEWINSTRUCCIONTS LLAVDER
        {$$ =new ifIns.default($3,$6, undefined, undefined,@1.first_line,@1.first_column);}
;

ELSEIFSINS :
    ELSEIFSINS RESELSE SIMPLEIF      {$1.push($3); $$=$1;}
    | RESELSE SIMPLEIF               {$$=[$2];;}
;

/* ciclo while*/

WHILEINS:
    RESWHILE PARABRE EXPRESION_LOGICA PARCIERRA LLAVIZQ NEWINSTRUCCIONTS LLAVDER
                            {$$ = new mientras.default($3,$6,@2.first_line,@2.first_column)}
;


NEWINSTRUCCIONTS:
    INSTRUCCIONES {$$ = new newInstructions.default($1,@1.first_line,@1.first_column)}

;   

CICLO_DOWHILE:
        do LLAVIZQ NEWINSTRUCCIONTS LLAVDER RESWHILE PARABRE EXPRESION_LOGICA PARCIERRA 
                        {$$ = new doWhile.default($7,$3,@2.first_line,@2.first_column)}
        // Do until 
        //do llaveA   ACCIONES  llaveC until parentA CONDICIONAL parentC puntoComa
;