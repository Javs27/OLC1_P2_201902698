/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,25],$V2=[1,14],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,21],$V8=[1,24],$V9=[1,22],$Va=[1,23],$Vb=[5,10,18,19,23,24,25,26,41,46,57,61,63,65,66],$Vc=[1,30],$Vd=[1,32],$Ve=[1,38],$Vf=[2,14],$Vg=[5,10,18,19,23,24,25,26,41,46,57,58,60,61,63,65,66],$Vh=[1,67],$Vi=[1,61],$Vj=[1,62],$Vk=[1,63],$Vl=[1,64],$Vm=[1,65],$Vn=[1,93],$Vo=[1,97],$Vp=[1,98],$Vq=[1,99],$Vr=[1,100],$Vs=[20,21,28,30,31,32,40,42,48,49,50,51,52,53,64],$Vt=[1,106],$Vu=[1,110],$Vv=[1,114],$Vw=[1,118],$Vx=[5,10,18,19,23,24,25,26,35,41,46,57,61,63,65,66],$Vy=[20,21,28,30,40,42,48,49,50,51,52,53,64],$Vz=[1,181],$VA=[1,180],$VB=[1,182],$VC=[1,183],$VD=[1,184],$VE=[1,216],$VF=[5,10,17,18,19,23,24,25,26,41,46,57,61,63,65,66],$VG=[46,63,65];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIAR":3,"ACCIONES":4,"EOF":5,"ACCION":6,"CICLO_IF":7,"DECLARACION":8,"CASTEOS":9,"INCREMETO_DECREMENTO":10,"VECTOR_TIPO1":11,"VECTOR_TIPO2":12,"SWITCH_CASE":13,"CICLO_WHILE":14,"DECLARACION_INCREMENTOS":15,"LISTA_IDENTIFICADOR":16,"coma":17,"Identificador":18,"Int":19,"puntoComa":20,"igual":21,"ARITMETICA":22,"Boolean":23,"Char":24,"String":25,"Double":26,"ACCESO_VECTORES":27,"suma":28,"Numero":29,"resta":30,"division":31,"multiplicacion":32,"verdadero":33,"falso":34,"Cadena":35,"Caracter":36,"incremento":37,"decremento":38,"corcheteA":39,"corcheteC":40,"parentA":41,"parentC":42,"New":43,"llaveA":44,"DATOS_VECTOR":45,"llaveC":46,"CONDICIONAL":47,"mayor":48,"menor":49,"menorIgual":50,"mayorIgual":51,"igualigual":52,"diferente":53,"IF":54,"ELSE":55,"VARIOS_ELIF":56,"if":57,"else":58,"ELIF":59,"elif":60,"switch":61,"CASES":62,"case":63,"dosPuntos":64,"default":65,"While":66,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"INCREMETO_DECREMENTO",17:"coma",18:"Identificador",19:"Int",20:"puntoComa",21:"igual",23:"Boolean",24:"Char",25:"String",26:"Double",28:"suma",29:"Numero",30:"resta",31:"division",32:"multiplicacion",33:"verdadero",34:"falso",35:"Cadena",36:"Caracter",37:"incremento",38:"decremento",39:"corcheteA",40:"corcheteC",41:"parentA",42:"parentC",43:"New",44:"llaveA",46:"llaveC",48:"mayor",49:"menor",50:"menorIgual",51:"mayorIgual",52:"igualigual",53:"diferente",57:"if",58:"else",60:"elif",61:"switch",63:"case",64:"dosPuntos",65:"default",66:"While"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[16,3],[16,1],[8,3],[8,5],[8,4],[8,5],[8,3],[8,5],[8,3],[8,5],[8,3],[8,5],[8,3],[8,4],[22,3],[22,1],[22,3],[22,3],[22,3],[22,1],[22,1],[22,1],[22,1],[22,1],[22,2],[22,2],[22,4],[22,7],[15,3],[15,3],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,3],[11,11],[11,11],[11,11],[11,11],[11,11],[11,16],[11,17],[11,16],[11,16],[11,16],[12,9],[12,9],[12,9],[12,6],[12,9],[12,17],[12,17],[45,3],[45,1],[45,2],[45,1],[45,2],[45,1],[45,4],[45,6],[45,4],[45,6],[27,4],[27,7],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[7,1],[7,2],[7,3],[7,2],[54,7],[55,4],[59,7],[56,2],[56,1],[13,7],[62,5],[62,4],[62,4],[14,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("Analisis del proyecto terminado :D");
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,11:8,12:9,13:10,14:11,15:12,16:15,18:$V1,19:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:20,41:$V7,54:13,57:$V8,61:$V9,66:$Va},{1:[3]},{5:[1,26],6:27,7:4,8:5,9:6,10:$V0,11:8,12:9,13:10,14:11,15:12,16:15,18:$V1,19:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:20,41:$V7,54:13,57:$V8,61:$V9,66:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,98],{55:28,56:29,59:31,58:$Vc,60:$Vd}),{16:33,18:$V1,39:[1,34]},{17:$Ve,21:[1,35],37:[1,36],38:[1,37],39:[1,39]},{16:40,18:$V1,39:[1,41]},{16:42,18:$V1,39:[1,43]},{16:44,18:$V1,39:[1,45]},{16:46,18:$V1,39:[1,47]},{21:[1,48]},{19:[1,49]},{41:[1,50]},{41:[1,51]},{41:[1,52]},o([17,20,21,37,38,39,42],$Vf),{1:[2,1]},o($Vb,[2,2]),o($Vb,[2,99]),o($Vb,[2,101],{55:53,59:54,58:$Vc,60:$Vd}),{44:[1,55]},o($Vg,[2,106]),{41:[1,56]},{17:$Ve,20:[1,57],21:[1,58]},{40:[1,59]},{16:66,18:$Vh,22:60,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{20:[1,68]},{20:[1,69]},{18:[1,70]},{16:66,18:$Vh,22:71,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{17:$Ve,20:[1,73],21:[1,72]},{40:[1,74]},{17:$Ve,20:[1,76],21:[1,75]},{40:[1,77]},{17:$Ve,20:[1,79],21:[1,78]},{40:[1,80]},{17:$Ve,20:[1,82],21:[1,81]},{40:[1,83]},{16:66,18:$Vh,22:84,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{42:[1,85]},{16:86,18:$V1},{16:66,18:$Vh,22:88,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,47:87},{16:66,18:$Vh,22:88,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,47:89},o($Vb,[2,100]),o($Vg,[2,105]),{4:90,6:3,7:4,8:5,9:6,10:$V0,11:8,12:9,13:10,14:11,15:12,16:15,18:$V1,19:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:20,41:$V7,54:13,57:$V8,61:$V9,66:$Va},{16:66,18:$Vh,22:88,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,47:91},o($Vb,[2,15]),{16:66,18:$Vh,22:92,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,41:$Vn},{16:66,18:$Vh,22:94,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,39:[1,95]},{20:[1,96],28:$Vo,30:$Vp,31:$Vq,32:$Vr},o($Vs,[2,28]),o($Vs,[2,32]),o($Vs,[2,33]),o($Vs,[2,34]),o($Vs,[2,35]),o($Vs,[2,36],{17:$Ve,37:[1,101],38:[1,102]}),o([17,20,21,28,30,31,32,37,38,40,42,48,49,50,51,52,53,64],$Vf,{39:[1,103]}),o($Vb,[2,41]),o($Vb,[2,42]),o([17,20,21,28,30,31,32,37,38,39,40,42,48,49,50,51,52,53,64],[2,13]),{28:$Vo,30:$Vp,31:$Vq,32:$Vr,40:[1,104]},{16:66,18:$Vh,22:105,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,41:$Vt},o($Vb,[2,19]),{16:66,18:$Vh,22:107,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,39:[1,108]},{16:66,18:$Vh,22:109,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,41:$Vu},o($Vb,[2,21]),{16:66,18:$Vh,22:111,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,39:[1,112]},{16:66,18:$Vh,22:113,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,41:$Vv},o($Vb,[2,23]),{16:66,18:$Vh,22:115,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,39:[1,116]},{16:66,18:$Vh,22:117,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,41:$Vw},o($Vb,[2,25]),{16:66,18:$Vh,22:119,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,39:[1,120]},{20:[1,121],28:$Vo,30:$Vp,31:$Vq,32:$Vr},o($Vx,[2,61]),{17:$Ve,42:[1,122]},{42:[1,123]},{21:[1,126],28:$Vo,30:$Vp,31:$Vq,32:$Vr,48:[1,124],49:[1,125],50:[1,127],51:[1,128],52:[1,129],53:[1,130]},{42:[1,131]},{6:27,7:4,8:5,9:6,10:$V0,11:8,12:9,13:10,14:11,15:12,16:15,18:$V1,19:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:20,41:$V7,46:[1,132],54:13,57:$V8,61:$V9,66:$Va},{42:[1,133]},{20:[1,134],28:$Vo,30:$Vp,31:$Vq,32:$Vr},{19:[1,135]},{21:[1,136],28:$Vo,30:$Vp,31:$Vq,32:$Vr},{40:[1,137]},o($Vb,[2,17]),{16:66,18:$Vh,22:138,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{16:66,18:$Vh,22:139,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{16:66,18:$Vh,22:140,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{16:66,18:$Vh,22:141,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},o($Vs,[2,37]),o($Vs,[2,38]),{16:66,18:$Vh,22:142,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{21:[2,89],39:[1,143]},{20:[1,144],28:$Vo,30:$Vp,31:$Vq,32:$Vr},{23:[1,145]},{21:[1,146],28:$Vo,30:$Vp,31:$Vq,32:$Vr},{40:[1,147]},{20:[1,148],28:$Vo,30:$Vp,31:$Vq,32:$Vr},{24:[1,149]},{21:[1,150],28:$Vo,30:$Vp,31:$Vq,32:$Vr},{40:[1,151]},{20:[1,152],28:$Vo,30:$Vp,31:$Vq,32:$Vr},{25:[1,153]},{21:[1,154],28:$Vo,30:$Vp,31:$Vq,32:$Vr},{40:[1,155]},{20:[1,156],28:$Vo,30:$Vp,31:$Vq,32:$Vr},{26:[1,157]},{21:[1,158],28:$Vo,30:$Vp,31:$Vq,32:$Vr},{40:[1,159]},o($Vb,[2,26]),{44:[1,160]},{44:[1,161]},{16:66,18:$Vh,22:162,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{16:66,18:$Vh,22:163,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{16:66,18:$Vh,22:164,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{16:66,18:$Vh,22:165,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{16:66,18:$Vh,22:166,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{16:66,18:$Vh,22:167,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{16:66,18:$Vh,22:168,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{44:[1,169]},o($Vb,[2,103]),{44:[1,170]},o($Vb,[2,16]),{42:[1,171]},{43:[1,172],44:[1,173]},{16:66,18:$Vh,22:174,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},o($Vy,[2,27],{31:$Vq,32:$Vr}),o($Vy,[2,29],{31:$Vq,32:$Vr}),o($Vs,[2,30]),o($Vs,[2,31]),{28:$Vo,30:$Vp,31:$Vq,32:$Vr,40:[1,175]},{16:66,18:$Vh,22:176,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},o($Vb,[2,18]),{42:[1,177]},{17:$Vz,29:$VA,35:$VB,36:$VC,43:[1,178],44:$VD,45:179},{16:66,18:$Vh,22:185,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},o($Vb,[2,20]),{42:[1,186]},{43:[1,187],44:[1,188]},{16:66,18:$Vh,22:189,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},o($Vb,[2,22]),{42:[1,190]},{43:[1,191],44:[1,192]},{16:66,18:$Vh,22:193,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},o($Vb,[2,24]),{42:[1,194]},{43:[1,195],44:[1,196]},{16:66,18:$Vh,22:197,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{62:198,63:[1,199]},{4:200,6:3,7:4,8:5,9:6,10:$V0,11:8,12:9,13:10,14:11,15:12,16:15,18:$V1,19:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:20,41:$V7,54:13,57:$V8,61:$V9,66:$Va},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,42:[2,91]},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,42:[2,92]},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,42:[2,93]},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,42:[2,94]},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,42:[2,95]},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,42:[2,96]},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,42:[2,97]},{4:201,6:3,7:4,8:5,9:6,10:$V0,11:8,12:9,13:10,14:11,15:12,16:15,18:$V1,19:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:20,41:$V7,54:13,57:$V8,61:$V9,66:$Va},{4:202,6:3,7:4,8:5,9:6,10:$V0,11:8,12:9,13:10,14:11,15:12,16:15,18:$V1,19:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:20,41:$V7,54:13,57:$V8,61:$V9,66:$Va},{29:[1,203],34:[1,204],35:[1,206],36:[1,205]},{19:[1,207]},{17:$Vz,29:$VA,35:$VB,36:$VC,44:$VD,45:208},{21:[1,209],28:$Vo,30:$Vp,31:$Vq,32:$Vr},o($Vs,[2,39],{39:[1,210]}),{28:$Vo,30:$Vp,31:$Vq,32:$Vr,40:[1,211]},{29:[1,212],35:[1,213],36:[1,214]},{23:[1,215]},o($Vb,[2,75],{17:$VE}),o($VF,[2,80]),{35:[1,217],36:[1,218]},o($VF,[2,82]),o($VF,[2,84]),{33:[1,219],34:[1,220]},{21:[1,221],28:$Vo,30:$Vp,31:$Vq,32:$Vr},{29:[1,222],33:[1,224],34:[1,223],35:[1,225]},{24:[1,226]},{17:$Vz,29:$VA,35:$VB,36:$VC,44:$VD,45:227},{21:[1,228],28:$Vo,30:$Vp,31:$Vq,32:$Vr},{29:[1,229],33:[1,231],34:[1,230],35:[1,233],36:[1,232]},{25:[1,234]},{17:$Vz,29:$VA,35:$VB,36:$VC,44:$VD,45:235},{21:[1,236],28:$Vo,30:$Vp,31:$Vq,32:$Vr},{29:[1,237],35:[1,238]},{26:[1,239]},{17:$Vz,29:$VA,35:$VB,36:$VC,44:$VD,45:240},{21:[1,241],28:$Vo,30:$Vp,31:$Vq,32:$Vr},{46:[1,242],63:[1,243],65:[1,244]},{16:66,18:$Vh,22:245,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{6:27,7:4,8:5,9:6,10:$V0,11:8,12:9,13:10,14:11,15:12,16:15,18:$V1,19:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:20,41:$V7,46:[1,246],54:13,57:$V8,61:$V9,66:$Va},{6:27,7:4,8:5,9:6,10:$V0,11:8,12:9,13:10,14:11,15:12,16:15,18:$V1,19:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:20,41:$V7,46:[1,247],54:13,57:$V8,61:$V9,66:$Va},{6:27,7:4,8:5,9:6,10:$V0,11:8,12:9,13:10,14:11,15:12,16:15,18:$V1,19:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:20,41:$V7,46:[1,248],54:13,57:$V8,61:$V9,66:$Va},{20:[1,249]},{20:[1,250]},{20:[1,251]},{20:[1,252]},{39:[1,253]},{17:$VE,46:[1,254]},{43:[1,255],44:[1,256]},{16:66,18:$Vh,22:257,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{21:[2,90]},{20:[1,258]},{20:[1,259]},{20:[1,260]},{39:[1,261]},{29:[1,262]},o($VF,[2,81]),o($VF,[2,83]),{17:[1,264],46:[1,263]},{17:[1,266],46:[1,265]},{43:[1,267]},{20:[1,268]},{20:[1,269]},{20:[1,270]},{20:[1,271]},{39:[1,272]},{17:$VE,46:[1,273]},{43:[1,274]},{20:[1,275]},{20:[1,276]},{20:[1,277]},{20:[1,278]},{20:[1,279]},{39:[1,280]},{17:$VE,46:[1,281]},{43:[1,282],44:[1,283]},{20:[1,284]},{20:[1,285]},{39:[1,286]},{17:$VE,46:[1,287]},{43:[1,288]},o($Vb,[2,107]),{16:66,18:$Vh,22:289,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{64:[1,290]},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,64:[1,291]},o($Vb,[2,111]),o($Vg,[2,102]),o($Vg,[2,104]),o($Vx,[2,43]),o($Vx,[2,44]),o($Vx,[2,45]),o($Vx,[2,46]),{16:66,18:$Vh,22:292,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{20:[1,293]},{19:[1,294]},{44:[1,295]},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,40:[1,296]},o($Vx,[2,49]),o($Vx,[2,50]),o($Vx,[2,51]),{16:66,18:$Vh,22:297,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},o($VF,[2,79]),{20:[1,298]},{33:[1,299]},{20:[1,300]},{34:[1,301]},{23:[1,302]},o($Vx,[2,52]),o($Vx,[2,53]),o($Vx,[2,54]),o($Vx,[2,55]),{16:66,18:$Vh,22:303,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{20:[1,304]},{24:[1,305]},o($Vx,[2,56]),o($Vx,[2,57]),o($Vx,[2,58]),o($Vx,[2,59]),o($Vx,[2,60]),{16:66,18:$Vh,22:306,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{20:[1,307]},{25:[1,308]},{44:[1,309]},o($Vx,[2,47]),o($Vx,[2,48]),{16:66,18:$Vh,22:310,29:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm},{20:[1,311]},{26:[1,312]},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,64:[1,313]},{4:314,6:3,7:4,8:5,9:6,10:$V0,11:8,12:9,13:10,14:11,15:12,16:15,18:$V1,19:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:20,41:$V7,54:13,57:$V8,61:$V9,66:$Va},{4:315,6:3,7:4,8:5,9:6,10:$V0,11:8,12:9,13:10,14:11,15:12,16:15,18:$V1,19:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:20,41:$V7,54:13,57:$V8,61:$V9,66:$Va},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,40:[1,316]},o($Vb,[2,72]),{39:[1,317]},{17:$Vz,29:$VA,35:$VB,36:$VC,44:$VD,45:318},o($Vs,[2,40]),{28:$Vo,30:$Vp,31:$Vq,32:$Vr,40:[1,319]},o($VF,[2,85]),{46:[1,320]},o($VF,[2,87]),{46:[1,321]},{39:[1,322]},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,40:[1,323]},o($Vb,[2,76]),{39:[1,324]},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,40:[1,325]},o($Vb,[2,73]),{39:[1,326]},{17:$Vz,29:$VA,35:$VB,36:$VC,44:$VD,45:327},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,40:[1,328]},o($Vb,[2,74]),{39:[1,329]},{4:330,6:3,7:4,8:5,9:6,10:$V0,11:8,12:9,13:10,14:11,15:12,16:15,18:$V1,19:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:20,41:$V7,54:13,57:$V8,61:$V9,66:$Va},o($VG,[2,110],{7:4,8:5,9:6,11:8,12:9,13:10,14:11,15:12,54:13,16:15,27:20,6:27,10:$V0,18:$V1,19:$V2,23:$V3,24:$V4,25:$V5,26:$V6,41:$V7,57:$V8,61:$V9,66:$Va}),o($VG,[2,109],{7:4,8:5,9:6,11:8,12:9,13:10,14:11,15:12,54:13,16:15,27:20,6:27,10:$V0,18:$V1,19:$V2,23:$V3,24:$V4,25:$V5,26:$V6,41:$V7,57:$V8,61:$V9,66:$Va}),{20:[1,331]},{29:[1,332]},{17:$VE,46:[1,333]},{20:[1,334]},{20:[1,335]},{20:[1,336]},{29:[1,337]},{20:[1,338]},{9:339,19:[1,340],23:[1,342],24:[1,343],25:[1,344],26:[1,341],41:$V7},{20:[1,345]},{29:[1,346]},{17:$VE,46:[1,347]},{20:[1,348]},{29:[1,349]},o($VG,[2,108],{7:4,8:5,9:6,11:8,12:9,13:10,14:11,15:12,54:13,16:15,27:20,6:27,10:$V0,18:$V1,19:$V2,23:$V3,24:$V4,25:$V5,26:$V6,41:$V7,57:$V8,61:$V9,66:$Va}),o($Vb,[2,62]),{40:[1,350]},{17:[1,351]},o($Vb,[2,64]),o($VF,[2,86]),o($VF,[2,88]),{40:[1,352]},o($Vb,[2,65]),{35:[1,353]},{16:354,18:$V1},{16:355,18:$V1},{16:356,18:$V1},{16:357,18:$V1},{16:358,18:$V1},o($Vb,[2,66]),{40:[1,359]},{17:[1,360]},o($Vb,[2,63]),{40:[1,361]},{39:[1,362]},{44:[1,363]},{39:[1,364]},{40:[1,365]},{17:$Ve,21:[1,366]},{17:$Ve,21:[1,367]},{17:$Ve,21:[1,368]},{17:$Ve,21:[1,369]},{17:$Ve,21:[1,370]},{39:[1,371]},{44:[1,372]},{39:[1,373]},{29:[1,374]},{17:$Vz,29:$VA,35:$VB,36:$VC,44:$VD,45:375},{29:[1,376]},{39:[1,377]},{41:$Vn},{41:$Vw},{41:$Vt},{41:$Vu},{41:$Vv},{29:[1,378]},{17:$Vz,29:$VA,35:$VB,36:$VC,44:$VD,45:379},{29:[1,380]},{40:[1,381]},{17:$VE,46:[1,382]},{40:[1,383]},{29:[1,384]},{40:[1,385]},{17:$VE,46:[1,386]},{40:[1,387]},{20:[1,388]},{46:[1,389]},{20:[1,390]},{40:[1,391]},{20:[1,392]},{46:[1,393]},{20:[1,394]},o($Vb,[2,67]),{20:[1,395]},o($Vb,[2,71]),{20:[1,396]},o($Vb,[2,70]),{20:[1,397]},o($Vb,[2,69]),o($Vb,[2,77]),o($Vb,[2,68]),o($Vb,[2,78])],
defaultActions: {26:[2,1],211:[2,90]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    // variables globales, JS
    var flag=0;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*estos  se omiten*/
break;
case 1:/*estos  se omiten*/
break;
case 2:/*estos  se omiten*/
break;
case 3:/*estos  se omiten*/
break;
case 4:return 17;
break;
case 5:return 'punto';
break;
case 6:return 64;
break;
case 7:return 20;
break;
case 8:return 44;
break;
case 9:return 46;
break;
case 10:return 39;
break;
case 11:return 40;
break;
case 12:return 41;
break;
case 13:return 42;
break;
case 14:return 49;
break;
case 15:return 48;
break;
case 16:return 51;
break;
case 17:return 50;
break;
case 18:return 53;
break;
case 19:return 52;
break;
case 20:return 21;
break;
case 21:return 37;
break;
case 22:return 28;
break;
case 23:return 38;
break;
case 24:return 30;
break;
case 25:return 31;
break;
case 26:return  'multiplicacion';
break;
case 27:return 'operadorOr';
break;
case 28:return  'operadorAnd';
break;
case 29:return  'operadorNot';
break;
case 30:return 19;
break;
case 31:return 26;
break;
case 32:return 23;
break;
case 33:return  'Char';
break;
case 34:return  'String';
break;
case 35:return 34;
break;
case 36:return 33;
break;
case 37:return 43;
break;
case 38:return  'if';
break;
case 39:return  'else';
break;
case 40:return   'switch';
break;
case 41:return 63;
break;
case 42:return 60;
break;
case 43:return 66;
break;
case 44:return  'for';
break;
case 45:return 'do';
break;
case 46:return 'until';
break;
case 47:return 'break';
break;
case 48:return 'continue';
break;
case 49:return 'return';
break;
case 50:return 'Llamada';
break;
case 51:return 'LlaamadaPar';
break;
case 52:return 'print';
break;
case 53:return 'println';
break;
case 54:return 'toLower';
break;
case 55:return 'toUpper';
break;
case 56:return 'round';
break;
case 57:return 'length';
break;
case 58:return 'typeof';
break;
case 59:return  'toString';
break;
case 60:return 'toCharArray';
break;
case 61:return 'push';
break;
case 62:return 'run';
break;
case 63:return 65;
break;
case 64:return 29;
break;
case 65:return 35;
break;
case 66:return 36;
break;
case 67:return 18;
break;
case 68:return 5;
break;
case 69:console.log("Este es un error lexico" + yy_.yytext)
break;
}
},
rules: [/^(?:[ \r\t\n\f]+)/i,/^(?:\n)/i,/^(?:\/\/.*)/i,/^(?:[/][][^][]+([^/][^][]+)*[/])/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:<)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:elif\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:LLAMADA\b)/i,/^(?:PARAMETROS_LLAMADA\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:push\b)/i,/^(?:run\b)/i,/^(?:Default\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:"(.+)*")/i,/^(?:'([a-zA-Z0-9])*')/i,/^(?:[a-zA-Z0-9_]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}