/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,12],$V2=[1,13],$V3=[1,18],$V4=[1,14],$V5=[1,17],$V6=[1,15],$V7=[1,16],$V8=[5,13,20,21,25,31,32,41,42],$V9=[1,24],$Va=[1,27],$Vb=[15,16,19,24,43,44],$Vc=[1,38],$Vd=[1,41],$Ve=[1,42],$Vf=[1,56],$Vg=[1,55],$Vh=[5,13,20,21,25,31,32,36,41,42],$Vi=[1,63],$Vj=[1,74],$Vk=[1,73],$Vl=[1,75],$Vm=[1,78],$Vn=[1,79],$Vo=[1,88],$Vp=[1,89],$Vq=[1,90],$Vr=[1,91],$Vs=[15,16,26,28,29,30,34,37,38,39,40],$Vt=[5,13,20,21,23,25,31,32,41,42],$Vu=[1,134],$Vv=[15,16,26,28,34,37,38,39,40];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIAR":3,"ACCIONES":4,"EOF":5,"ACCION":6,"DECLARACION":7,"SENTENCIA_IF":8,"CASTEOS":9,"INCREMETO_DECREMENTO":10,"VECTOR_TIPO1":11,"VECTOR_TIPO2":12,"Int":13,"LISTA_IDENTIFICADOR":14,"puntoComa":15,"igual":16,"ARITMETICA":17,"verdadero":18,"falso":19,"Boolean":20,"Char":21,"Caracter":22,"Cadena":23,"coma":24,"Identificador":25,"suma":26,"Numero":27,"resta":28,"division":29,"multiplicacion":30,"if":31,"parentA":32,"CONDICIONAL":33,"parentC":34,"llaveA":35,"llaveC":36,"mayor":37,"menor":38,"menorIgual":39,"mayorIgual":40,"Double":41,"String":42,"incremento":43,"decremento":44,"corcheteA":45,"corcheteC":46,"New":47,"DATOS_VECTOR":48,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"Int",15:"puntoComa",16:"igual",18:"verdadero",19:"falso",20:"Boolean",21:"Char",22:"Caracter",23:"Cadena",24:"coma",25:"Identificador",26:"suma",27:"Numero",28:"resta",29:"division",30:"multiplicacion",31:"if",32:"parentA",34:"parentC",35:"llaveA",36:"llaveC",37:"mayor",38:"menor",39:"menorIgual",40:"mayorIgual",41:"Double",42:"String",43:"incremento",44:"decremento",45:"corcheteA",46:"corcheteC",47:"New"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,3],[7,5],[7,4],[7,4],[7,5],[7,5],[7,5],[7,4],[14,3],[14,1],[17,3],[17,1],[17,3],[17,3],[17,3],[17,1],[8,7],[33,3],[33,3],[33,3],[33,3],[33,3],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,3],[10,3],[10,3],[10,5],[10,5],[10,7],[10,7],[11,11],[11,11],[11,11],[11,11],[11,11],[11,16],[11,17],[11,16],[11,16],[11,16],[12,6],[12,6],[12,6],[12,6],[12,6],[48,4],[48,6],[48,8],[48,10],[48,4],[48,6],[48,8],[48,10],[48,4],[48,6],[48,8],[48,10],[48,4],[48,6],[48,4],[48,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("Analisis del proyecto terminado :D");
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,20:$V1,21:$V2,25:$V3,31:$V4,32:$V5,41:$V6,42:$V7},{1:[3]},{5:[1,19],6:20,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:11,20:$V1,21:$V2,25:$V3,31:$V4,32:$V5,41:$V6,42:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),{14:21,25:$V3,45:[1,22]},{16:[1,23],19:$V9,24:$Va,43:[1,25],44:[1,26]},{14:28,25:$V3,45:[1,29]},{14:30,25:$V3,45:[1,31]},{32:[1,32]},{14:33,25:$V3,45:[1,34]},{14:35,25:$V3,45:[1,36]},{13:[1,37]},o($Vb,[2,19]),{1:[2,1]},o($V8,[2,2]),{15:$Vc,16:[1,39],24:$Va},{46:[1,40]},{14:43,18:$Vd,23:$Ve,25:$V3,27:[1,44]},{18:[1,45]},{15:[1,46]},{15:[1,47]},{25:[1,48]},{16:[1,49],24:$Va},{46:[1,50]},{16:[1,51],24:$Va},{46:[1,52]},{17:54,25:$Vf,27:$Vg,33:53},{16:[1,57],24:$Va},{46:[1,58]},{16:[1,59],24:$Va},{46:[1,60]},{34:[1,61]},o($Vh,[2,10]),{17:62,25:$Vf,27:$Vg,32:$Vi},{14:64,25:$V3,45:[1,65]},{15:[1,66]},{15:[1,67]},{24:$Va,43:[1,69],44:[1,68]},{26:[1,70],28:[1,71]},{15:[1,72]},o($V8,[2,51]),o($V8,[2,52]),o($Vb,[2,18]),{18:$Vj,19:$Vk,32:$Vl},{14:76,25:$V3,45:[1,77]},{22:$Vm,32:$Vn},{14:80,25:$V3,45:[1,81]},{34:[1,82]},{16:[1,85],26:$Vo,28:$Vp,29:$Vq,30:$Vr,37:[1,83],38:[1,84],39:[1,86],40:[1,87]},o($Vs,[2,21]),o($Vs,[2,25]),{32:[1,92]},{14:93,25:$V3,45:[1,94]},{32:[1,95]},{14:96,25:$V3,45:[1,97]},o($Vt,[2,50]),{15:[1,98],26:$Vo,28:$Vp,29:$Vq,30:$Vr},{13:[1,99]},{16:[1,100],24:$Va},{46:[1,101]},o($Vh,[2,12]),o($Vh,[2,17]),{15:[1,102]},{15:[1,103]},{14:104,25:$V3},{14:105,25:$V3},o($Vh,[2,13]),{15:[1,106]},{15:[1,107]},{20:[1,108]},{16:[1,109],24:$Va},{46:[1,110]},{15:[1,111]},{21:[1,112]},{16:[1,113],24:$Va},{46:[1,114]},{35:[1,115]},{17:116,25:$Vf,27:$Vg},{17:117,25:$Vf,27:$Vg},{17:118,25:$Vf,27:$Vg},{17:119,25:$Vf,27:$Vg},{17:120,25:$Vf,27:$Vg},{17:121,25:$Vf,27:$Vg},{17:122,25:$Vf,27:$Vg},{17:123,25:$Vf,27:$Vg},{17:124,25:$Vf,27:$Vg},{41:[1,125]},{16:[1,126],24:$Va},{46:[1,127]},{42:[1,128]},{16:[1,129],24:$Va},{46:[1,130]},o($Vh,[2,11]),{34:[1,131]},{35:$Vu,47:[1,132],48:133},{14:135,25:$V3},o($V8,[2,53]),o($V8,[2,54]),{24:$Va,43:[1,136]},{24:$Va,44:[1,137]},o($Vh,[2,14]),o($Vh,[2,15]),{34:[1,138]},{35:$Vu,47:[1,139],48:140},{14:141,25:$V3},o($Vh,[2,16]),{34:[1,142]},{35:$Vu,47:[1,143],48:144},{14:145,25:$V3},{7:146,13:[1,147],14:148,20:[1,149],21:[1,150],25:$V3},{26:$Vo,28:$Vp,29:$Vq,30:$Vr,34:[2,27]},{26:$Vo,28:$Vp,29:$Vq,30:$Vr,34:[2,28]},{26:$Vo,28:$Vp,29:$Vq,30:$Vr,34:[2,29]},{26:$Vo,28:$Vp,29:$Vq,30:$Vr,34:[2,30]},{26:$Vo,28:$Vp,29:$Vq,30:$Vr,34:[2,31]},o($Vv,[2,20],{29:$Vq,30:$Vr}),o($Vv,[2,22],{29:$Vq,30:$Vr}),o($Vs,[2,23]),o($Vs,[2,24]),{34:[1,151]},{35:$Vu,47:[1,152],48:153},{14:154,25:$V3},{34:[1,155]},{35:$Vu,47:[1,156],48:157},{14:158,25:$V3},{19:[1,160],22:[1,161],23:[1,162],27:[1,159]},{13:[1,163]},o($V8,[2,67]),{18:[1,167],19:[1,168],22:[1,166],23:[1,165],27:[1,164]},{16:[1,169],24:$Va},{15:[1,170]},{15:[1,171]},{22:[1,174],23:[1,173],27:[1,172]},{20:[1,175]},o($V8,[2,71]),{16:[1,176],24:$Va},{18:[1,179],19:[1,178],23:[1,180],27:[1,177]},{21:[1,181]},o($V8,[2,69]),{16:[1,182],24:$Va},{36:[1,183]},{14:184,25:$V3},{16:[1,185],19:$V9,24:$Va},{14:186,25:$V3},{14:187,25:$V3},{23:[1,189],27:[1,188]},{41:[1,190]},o($V8,[2,70]),{16:[1,191],24:$Va},{18:[1,194],19:[1,193],22:[1,195],23:[1,196],27:[1,192]},{42:[1,197]},o($V8,[2,68]),{16:[1,198],24:$Va},{15:[1,199]},{15:[1,200]},{15:[1,201]},{15:[1,202]},{45:[1,203]},{24:[1,205],36:[1,204]},{24:[1,207],36:[1,206]},{24:[1,209],36:[1,208]},{24:[1,211],36:[1,210]},{24:[1,213],36:[1,212]},{47:[1,214]},o($V8,[2,55]),o($V8,[2,56]),{15:[1,215]},{15:[1,216]},{15:[1,217]},{45:[1,218]},{47:[1,219]},{15:[1,220]},{15:[1,221]},{15:[1,222]},{15:[1,223]},{45:[1,224]},{47:[1,225]},o($V8,[2,26]),{15:$Vc,16:[1,226],24:$Va},{18:$Vd,23:$Ve},{16:[1,227],24:$Va},{16:[1,228],24:$Va},{15:[1,229]},{15:[1,230]},{45:[1,231]},{47:[1,232]},{15:[1,233]},{15:[1,234]},{15:[1,235]},{15:[1,236]},{15:[1,237]},{45:[1,238]},{47:[1,239]},o($Vt,[2,32]),o($Vt,[2,33]),o($Vt,[2,34]),o($Vt,[2,35]),{27:[1,240]},{15:[1,241]},{27:[1,242]},{15:[1,243]},{23:[1,244]},{15:[1,245]},{22:[1,246]},{15:[1,247]},{18:[1,248]},{15:[1,249]},{19:[1,250]},{13:[1,251]},o($Vt,[2,38]),o($Vt,[2,39]),o($Vt,[2,40]),{27:[1,252]},{20:[1,253]},o($Vt,[2,41]),o($Vt,[2,42]),o($Vt,[2,43]),o($Vt,[2,44]),{27:[1,254]},{21:[1,255]},{17:62,25:$Vf,27:$Vg},{18:$Vj,19:$Vk},{22:$Vm},o($Vt,[2,36]),o($Vt,[2,37]),{27:[1,256]},{41:[1,257]},o($Vt,[2,45]),o($Vt,[2,46]),o($Vt,[2,47]),o($Vt,[2,48]),o($Vt,[2,49]),{27:[1,258]},{42:[1,259]},{46:[1,260]},o($V8,[2,72]),{24:[1,262],36:[1,261]},o($V8,[2,76]),{24:[1,264],36:[1,263]},o($V8,[2,80]),{24:[1,266],36:[1,265]},o($V8,[2,84]),{36:[1,267]},o($V8,[2,86]),{36:[1,268]},{45:[1,269]},{46:[1,270]},{45:[1,271]},{46:[1,272]},{45:[1,273]},{46:[1,274]},{45:[1,275]},{46:[1,276]},{45:[1,277]},{15:[1,278]},{15:[1,279]},{27:[1,280]},{15:[1,281]},{23:[1,282]},{15:[1,283]},{22:[1,284]},{15:[1,285]},{15:[1,286]},{27:[1,287]},{15:[1,288]},{27:[1,289]},{15:[1,290]},{9:291,13:[1,292],20:[1,294],21:[1,295],32:$V5,41:[1,293],42:[1,296]},{15:[1,297]},{27:[1,298]},{15:[1,299]},{27:[1,300]},o($V8,[2,57]),o($V8,[2,73]),{24:[1,302],36:[1,301]},o($V8,[2,77]),{24:[1,304],36:[1,303]},o($V8,[2,81]),{24:[1,306],36:[1,305]},o($V8,[2,85]),o($V8,[2,87]),{46:[1,307]},o($V8,[2,59]),{46:[1,308]},o($V8,[2,60]),{23:[1,309]},{14:310,25:$V3},{14:33,25:$V3},{14:311,25:$V3},{14:312,25:$V3},{14:35,25:$V3},o($V8,[2,58]),{46:[1,313]},o($V8,[2,61]),{46:[1,314]},{15:[1,315]},{27:[1,316]},{15:[1,317]},{23:[1,318]},{15:[1,319]},{22:[1,320]},{45:[1,321]},{45:[1,322]},{46:[1,323]},{16:[1,324],24:$Va},{16:[1,325],24:$Va},{16:[1,326],24:$Va},{45:[1,327]},{45:[1,328]},o($V8,[2,74]),{36:[1,329]},o($V8,[2,78]),{36:[1,330]},o($V8,[2,82]),{36:[1,331]},{27:[1,332]},{27:[1,333]},{45:[1,334]},{32:$Vi},{32:$Vl},{32:$Vn},{27:[1,335]},{27:[1,336]},{15:[1,337]},{15:[1,338]},{15:[1,339]},{46:[1,340]},{46:[1,341]},{27:[1,342]},{46:[1,343]},{46:[1,344]},o($V8,[2,75]),o($V8,[2,79]),o($V8,[2,83]),{15:[1,345]},{15:[1,346]},{46:[1,347]},{15:[1,348]},{15:[1,349]},o($V8,[2,62]),o($V8,[2,66]),{15:[1,350]},o($V8,[2,64]),o($V8,[2,65]),o($V8,[2,63])],
defaultActions: {19:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    // variables globales, JS
    var flag=0;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*estos  se omiten*/
break;
case 1:/*estos  se omiten*/
break;
case 2:/*estos  se omiten*/
break;
case 3:return 24;
break;
case 4:return 'punto';
break;
case 5:return 'dosPuntos';
break;
case 6:return 15;
break;
case 7:return 35;
break;
case 8:return 36;
break;
case 9:return 45;
break;
case 10:return 46;
break;
case 11:return 32;
break;
case 12:return 34;
break;
case 13:return 16;
break;
case 14:return 38;
break;
case 15:return 37;
break;
case 16:return 40;
break;
case 17:return 39;
break;
case 18:return 'diferente';
break;
case 19:return 43;
break;
case 20:return 26;
break;
case 21:return 44;
break;
case 22:return 28;
break;
case 23:return 29;
break;
case 24:return  'multiplicacion';
break;
case 25:return 'operadorOr';
break;
case 26:return  'operadorAnd';
break;
case 27:return  'operadorNot';
break;
case 28:return 13;
break;
case 29:return 41;
break;
case 30:return 20;
break;
case 31:return  'Char';
break;
case 32:return  'String';
break;
case 33:return 19;
break;
case 34:return 18;
break;
case 35:return 47;
break;
case 36:return  'if';
break;
case 37:return  'else';
break;
case 38:return   'switch';
break;
case 39:return 'case';
break;
case 40:return 'While';
break;
case 41:return  'for';
break;
case 42:return 'do';
break;
case 43:return 'until';
break;
case 44:return 'break';
break;
case 45:return 'continue';
break;
case 46:return 'return';
break;
case 47:return 'Llamada';
break;
case 48:return 'LlaamadaPar';
break;
case 49:return 'print';
break;
case 50:return 'println';
break;
case 51:return 'toLower';
break;
case 52:return 'toUpper';
break;
case 53:return 'round';
break;
case 54:return 'length';
break;
case 55:return 'typeof';
break;
case 56:return  'toString';
break;
case 57:return 'toCharArray';
break;
case 58:return 'push';
break;
case 59:return 'run';
break;
case 60:return 27;
break;
case 61:return 23;
break;
case 62:return 22;
break;
case 63:return 25;
break;
case 64:return 5;
break;
case 65:console.log("Este es un error lexico" + yy_.yytext)
break;
}
},
rules: [/^(?:[ \r\t\n\f]+)/i,/^(?:\n)/i,/^(?:[/][][^][]+([^/][^][]+)*[/])/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:LLAMADA\b)/i,/^(?:PARAMETROS_LLAMADA\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:push\b)/i,/^(?:run\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:"(.+)*")/i,/^(?:'([a-zA-Z0-9])*')/i,/^(?:[a-zA-Z0-9_]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}